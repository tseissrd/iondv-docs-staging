.. role:: raw-html-m2r(raw)
   :format: html

Шаг 2 Установка ядра, модулей и приложения
==========================================
:doc:`Оглавление <../index>`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Предыдущая страница: :doc:`Установка окружения <step1_installing_environment>`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Клонирование приложения и его компонентов
-----------------------------------------

**NB:** пути не должны содержать русских букв и пробелов. Мы советуем размещать приложение в ``c:\workspace``.

Рассматриваем формирование проекта с модулями на примере приложения ``develop-and-test``.


#. 
   Находим приложение в репозитории github. Набираем искомое приложение ``develop-and-test`` в поле поиска и переходим на него.

#. 
   Переходим в репозиторий файлов на ветку версии.

#. 
   Открываем файл ``package.json`` в котором смотрим зависимости.

.. code-block::

    "engines": {
       "ion": "3.0.0"
     },
     "ionModulesDependencies": {
       "registry": "3.0.0",
       "geomap": "1.5.0",
       "portal": "1.4.0",
       "report": "2.0.0",
       "ionadmin": "2.0.0",
       "dashboard": "1.1.0",
       "soap": "1.1.2"
     },
     "ionMetaDependencies": {
       "viewlib": "0.9.1"
     }


#. 
   ``engines": "ion": 3.0.0`` - версия ядра ``3.0.0``.  

#. 
   ``ionModulesDependencies`` - список модулей и их версий.  

#. 
   ``ionMetaDependencies`` - список других метаданных, необходимых для проекта, в данном случае исключение ``viewlib`` - библиотека представлений.

**NB:** для переключения на tag номера версии - смотрите версии в файле ``package.json``.

Получение репозитория ядра
^^^^^^^^^^^^^^^^^^^^^^^^^^

Ядро находится в репозитории `\ ``framework`` <https://github.com/iondv/framework>`_. На главной странице есть поле с путем к репозиторию.


#. 
   Запустите командную строку от имени администратора. 

#. 
   Скопируйте адрес репозитория, перейдите в папку workspace командой  ``cd c:\workspace`` и выполните команду ``git clone https://github.com/iondv/framework``. Эта команда создает папку ``framework`` и в неё клонирует репозиторий. 

Получение модулей
^^^^^^^^^^^^^^^^^


#. 
   Переходим в папку модулей командой ``cd framework\modules``. 

#. 
   Для каждого модуля из списка ``package.json`` в свойстве ``ionModulesDependencies`` - находим репозиторий модуля среди группы модулей ``https://github.com/iondv/ION-MODULES``.

#. 
   Клонируйте все модули из списка ``ionModulesDependencies`` командой ``git clone https://github.com/iondv/registry``.

#. 
   Перейдите в папку установленного модуля, переключитесь на tag номера версии ``git checkout tags/v1.27.1``. Например ``1.27.1`` - это номер версии модуля ``registry``. 

#. 
   Повторите для всех модулей. 

Получение приложения
^^^^^^^^^^^^^^^^^^^^


#. 
   Переходим в папку приложения. Если вы находитесь в папке модулей выполните команду ``cd ..\applications``.

#. 
   Далее вернитесь на страницу репозитория ``develop-and-test``\ , скопируйте путь и клонируйте его командой
   ``git clone https://github.com/iondv/develop-and-test``. 

#. 
   Перейдите в папку установленного приложения, переключитесь на tag номера версии ``git checkout tags/v1.17.0``.

#. 
   Установка зависимостей в ``ionMetaDependencies`` осуществляется в папку ``applications``\ , для установки необходимо убедиться, что находитесь в папке приложений. Клонируем приложения из списка в параметре  ``ionMetaDependencies``. Для приложения ``viewlib`` клонируйте командой ``git clone https://github.com/iondv/viewlib``.  

#. 
   Перейдите в папку установленного приложения, переключитесь на tag номера версии ``git checkout tags/v0.9.1``. Повторите для каждого приложения.

#. 
   Приложение скомпоновано. 

**NB:** мы советуем создать для него проект в IDE, например Visual Studio Code и в нём создать конфигурациионный файл.  

Конфигурациионный файл
----------------------

Конфигурационный файл служит для задания основных параметров окружения приложения и настройки дополнительных параметров запуска.


#. 
   Создайте конфигурационный файл ``setup`` с расширением ``ini`` в папке ``config``.

#. 
   Открываем файл в редакторе и вставляем содержимое. 

.. code-block::

   auth.denyTop=false 
   auth.registration=false 
   auth.exclude[]=/files/**
   auth.exclude[]=/images/**
   db.uri=mongodb://127.0.0.1:27017/iondv-dnt-db
   server.ports[]=8888
   module.default=registry
   fs.storageRoot=./files
   fs.urlBase=/files

Самый главный параметр - ``db.uri=mongodb://127.0.0.1:27017/db``. Он указывает на название базы которую мы будем использовать для приложения. База данных будет создана автоматически.

Следующая страница: `Шаг 3 Сборка, развертывание и запуск <step3_building_and_running.md>`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

----

`Licence </LICENSE>`_ &ensp;  `Contact us <https://iondv.com/portal/contacts>`_ &ensp;  `English </docs/en/1_system_deployment/step2_project_with_modules.md>`_   &ensp;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. raw:: html

   <div><img src="https://mc.iondv.com/watch/local/docs/framework" style="position:absolute; left:-9999px;" height=1 width=1 alt="iondv metrics"></div>


----

Copyright (c) 2018 **LLC "ION DV"**.\ :raw-html-m2r:`<br>`
All rights reserved.  
